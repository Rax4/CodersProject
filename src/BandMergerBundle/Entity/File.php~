<?php

namespace BandMergerBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File as Fil;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

/**
 * File
 *
 * @ORM\Table(name="file")
 * @ORM\Entity(repositoryClass="BandMergerBundle\Repository\FileRepository")
 * @Vich\Uploadable
 */
class File
{
     /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="instrument_file", fileNameProperty="src")
     * 
     * @var File
     */
    private $imageFile;
    
    /**
     * @ORM\Column(type="datetime")
     *
     * @var \DateTime
     */
    private $updatedAt;
   
    /**
     * @ORM\ManyToOne(targetEntity="Instrument", inversedBy="files")
     * @ORM\JoinColumn(name="instrument_id", referencedColumnName="id", onDelete="CASCADE")
     */
    private $instrument;
    
    
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="src", type="string", length=255, unique=true)
     */
    private $src;
    
    /**
     * @var int
     *
     * @ORM\Column(name="accepted", type="integer")
     */
    private $accepted;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     * @return File
     * @param Fil|\Symfony\Component\HttpFoundation\File\UploadedFile $file
     *
     * 
     */
    public function setImageFile(Fil $file = null)
    {
        $this->imageFile = $file;

        if ($file) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }


    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     * @return File
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string 
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set src
     *
     * @param string $src
     * @return File
     */
//    public function setSrc($src)
//    {
//        $this->src = $src;
//
//        return $this;
//    }

    /**
     * Get src
     *
     * @return string 
     */
//    public function getSrc()
//    {
//        return $this->src;
//    }

    /**
     * Set accepted
     *
     * @param integer $accepted
     * @return File
     */
    public function setAccepted($accepted)
    {
        $this->accepted = $accepted;

        return $this;
    }

    /**
     * Get accepted
     *
     * @return integer 
     */
    public function getAccepted()
    {
        return $this->accepted;
    }

    public function setInstrument(\BandMergerBundle\Entity\Instrument $instrument = null)
    {
        $this->instrument = $instrument;

        return $this;
    }

    /**
     * Get instrument
     *
     * @return \BandMergerBundle\Entity\Instrument 
     */
    public function getInstrument()
    {
        return $this->instrument;
    }
    
        /**
     * @return File|null
     */
    public function getImageFile()
    {
        return $this->imageFile;
    }

    /**
     * @param string $imageName
     *
     * @return File
     */
    public function setSrc($imageName)
    {
        $this->src = $imageName;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getSrc()
    {
        return $this->src;
    }
}
